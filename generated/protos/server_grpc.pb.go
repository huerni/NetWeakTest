//*
// Copyright (c) 2024 Peking University and Peking University
// Changsha Institute for Computing and Digital Economy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.2
// source: server.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CraneTest_NetWeakStart_FullMethodName = "/crane.grpc.CraneTest/NetWeakStart"
	CraneTest_NetWeakStop_FullMethodName  = "/crane.grpc.CraneTest/NetWeakStop"
)

// CraneTestClient is the test API for CraneTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CraneTestClient interface {
	NetWeakStart(ctx context.Context, in *NetWeakStartRequest, opts ...grpc.CallOption) (*NetWeakStartReply, error)
	NetWeakStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetWeakStopReply, error)
}

type craneTestClient struct {
	cc grpc.ClientConnInterface
}

func NewCraneTestClient(cc grpc.ClientConnInterface) CraneTestClient {
	return &craneTestClient{cc}
}

func (c *craneTestClient) NetWeakStart(ctx context.Context, in *NetWeakStartRequest, opts ...grpc.CallOption) (*NetWeakStartReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetWeakStartReply)
	err := c.cc.Invoke(ctx, CraneTest_NetWeakStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *craneTestClient) NetWeakStop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetWeakStopReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetWeakStopReply)
	err := c.cc.Invoke(ctx, CraneTest_NetWeakStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CraneTestServer is the server API for CraneTest service.
// All implementations must embed UnimplementedCraneTestServer
// for forward compatibility.
type CraneTestServer interface {
	NetWeakStart(context.Context, *NetWeakStartRequest) (*NetWeakStartReply, error)
	NetWeakStop(context.Context, *Empty) (*NetWeakStopReply, error)
	mustEmbedUnimplementedCraneTestServer()
}

// UnimplementedCraneTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCraneTestServer struct{}

func (UnimplementedCraneTestServer) NetWeakStart(context.Context, *NetWeakStartRequest) (*NetWeakStartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetWeakStart not implemented")
}
func (UnimplementedCraneTestServer) NetWeakStop(context.Context, *Empty) (*NetWeakStopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetWeakStop not implemented")
}
func (UnimplementedCraneTestServer) mustEmbedUnimplementedCraneTestServer() {}
func (UnimplementedCraneTestServer) testEmbeddedByValue()                   {}

// UnsafeCraneTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CraneTestServer will
// result in compilation errors.
type UnsafeCraneTestServer interface {
	mustEmbedUnimplementedCraneTestServer()
}

func RegisterCraneTestServer(s grpc.ServiceRegistrar, srv CraneTestServer) {
	// If the following call pancis, it indicates UnimplementedCraneTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CraneTest_ServiceDesc, srv)
}

func _CraneTest_NetWeakStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetWeakStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CraneTestServer).NetWeakStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CraneTest_NetWeakStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CraneTestServer).NetWeakStart(ctx, req.(*NetWeakStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CraneTest_NetWeakStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CraneTestServer).NetWeakStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CraneTest_NetWeakStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CraneTestServer).NetWeakStop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CraneTest_ServiceDesc is the grpc.ServiceDesc for CraneTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CraneTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crane.grpc.CraneTest",
	HandlerType: (*CraneTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetWeakStart",
			Handler:    _CraneTest_NetWeakStart_Handler,
		},
		{
			MethodName: "NetWeakStop",
			Handler:    _CraneTest_NetWeakStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
